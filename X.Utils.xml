<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2018.1.5 (Build 659_0_20788U)" ts="2024-06-11 22:36:25">
<Class name="X.Utils">
<TimeChanged>67002,47758.647163</TimeChanged>
<TimeCreated>65924,42787.627409</TimeCreated>

<Method name="Convert16ByteTo8Byte">
<Description><![CDATA[
Converts a 16-byte string to an 8-byte string.

@param {String} Input	16-byte string to convert
@returns {String}	8-byte string

@example
Set Hash = $System.Encryption.MD5Hash("hello world")
Write Hash // Illegible string & control characters
Set ConvertedHash = ##class(X.Utils).Convert16ByteTo8Byte(Hash)
Write ConvertedHash // 5EB63BBBE01EEED093CB22BB8F5ACDC3]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Input:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set Output = ""
	For I=1:1:$L(Input) {
		Set Chr = $ZH($A($E(Input,i)))
		Set Output = Output_$S($L(Chr)=1 : "0"_Chr, 1 : Chr)
	}
	Quit Output
]]></Implementation>
</Method>

<Method name="Luhn">
<Description>
Implements the Luhn algorithm for verifying if a number is potentially valid, or definitely invalid.
Used in for instance credit card number checks, bank account number checks.

@see https://en.wikipedia.org/wiki/Luhn_algorithm

@param {String|Number} Input	Number string to check
@return {Boolean}

@example
// Valid check digit - 3
Write ##class(X.Utils).Luhn("79927398713") // 1
// Invalid check digit - 4
Write ##class(X.Utils).Luhn("79927398714") // 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set Input = ""+Input
	If $L(Input)<2 Quit 1
	Set Sum = +$E(Input,*)
	Set Even = 1
	For I=$L(Input)-1:-1:1 {
		Set N = +$E(Input, I)
		If Even {
			Set N = 2*N
			If N>9 {
				Set Sum = Sum+1
				Set N = N-10
			}
		}
		Set Sum = Sum+N
		Set Even = 1-Even
	}
	Quit Sum#10=0
]]></Implementation>
</Method>

<Method name="Modulo">
<Description>
Calculate the modulo of a and b, ie a%b in a lot of other languages</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>a:%Integer,b:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	quit a - (b * (a\b))
]]></Implementation>
</Method>

<Method name="ReverseArray">
<Description>
Reverse an array</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>in:%DynamicArray</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	set out = []
	set size = in.%Size()
	for i=size-1:-1:0 {
		do out.%Push(in.%Get(i))
	}
	quit out
]]></Implementation>
</Method>
</Class>
</Export>
